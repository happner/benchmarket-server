#!/usr/bin/env node

require('dotenv').config();

var ROOT_API_KEY = process.env.ROOT_API_KEY || 'xxx';
var IFACE = process.env.IFACE || '0.0.0.0';
var PORT = process.env.PORT || 3001;

var express = require('express');
var bodyParser = require('body-parser');
var Promise = require('bluebird');
var uuid = require('uuid');

var authenticated = require('../lib/server/authenticated');
var database = require('../lib/server/database');
var metric = require('../lib/server/metric');

var app = express();

app.use(bodyParser.json());
app.use(express.static('static'));

app.listen(PORT, IFACE, function() {
  console.log('%s listening %s:%s', new Date(), IFACE, PORT);
});


app.post('/login', function(req, res) {
  if (!req.body.username || !req.body.password) {
    return res.sendStatus(400);
  }
  database(res, function(conn, done) {

    conn.query('SELECT * FROM users WHERE username = $1 and password = $2',
      [req.body.username, req.body.password], function(err, result) {
      done();

      if (err) {
        console.error('error running query', err);
        res.statusCode = 500;
        return res.send(err.stack);
      }

      if (!result.rows[0]) {
        res.statusCode = 404;
        return res.send();
      }

      res.statusCode = 200;
      res.send({
        id: result.rows[0].id,
        api_key: result.rows[0].api_key,
        username: result.rows[0].username
      });
    });
  });
});


app.post('/register', function(req, res) {
  if (typeof req.headers.authorization === 'undefined' || req.headers.authorization !== ROOT_API_KEY) {
    res.statusCode = 401;
    return res.end();
  }

  if (!req.body.username || !req.body.password) {
    res.statusCode = 400;
    return res.end();
  }

  database(res, function(conn, done) {
    var api_key = uuid.v4();

    conn.query('INSERT INTO users(username, password, api_key) VALUES ($1, $2, $3)',
      [req.body.username, req.body.password, api_key],
      function(err, result) {
        done();

        if (err) {
          console.error('error running query', err.stack);
          res.statusCode = 500;
          return res.send(err.stack);
        }

        res.statusCode = 200;
        res.send({
          username: req.body.username,
          password: req.body.password,
          api_key: api_key
        })

    });
  });
});


app.post('/benchmarks', authenticated(function(req, res, user, conn, done) {

  if (!Array.isArray(req.body)) {
    res.statusCode = 400;
    res.end();
    return done();
  }

  if (req.body.length === 0) {
    res.statusCode = 400;
    res.end();
    return done();
  }

  if (typeof req.body[0].branchh === 'undefined') {
    res.statusCode = 400;
    res.end('old version of benchmarket, please upgrade');
    return done();
  }


  Promise.resolve(req.body).map(
    metric.store({
      user: user,
      conn: conn
    }),
    {concurrency: 1}
  )
  .then(function() {
    res.statusCode = 201;
    done();
    res.end();
  })
  .catch(function(err) {
    res.statusCode = 500;
    console.error('error in /benchmarks', err.stack);
    res.end();
    done();
  });
}));


app.get('/users', authenticated(function(req, res, user, conn, done) {
  conn.query('SELECT id, username FROM users ORDER BY username', function(err, result) {
    done();

    if (err) {
      console.error('error running query', err.stack);
      res.statusCode = 500;
      return res.send(err.stack);
    }

    res.statusCode = 200;
    res.send(result.rows);
  })
}));


app.get('/repos', authenticated(function(req, res, user, conn, done) {

  conn.query(
    'SELECT DISTINCT repositories.id, repositories.name ' + // distinct??
    'FROM repositories ' +
    'INNER JOIN runs ' +
    'ON repositories.id = runs.repositories_id ' +
    'AND runs.users_id = $1' +
    'ORDER BY repositories.name',
  [req.query.whose], function(err, result) {
    done();

    if (err) {
      console.error('error running query', err.stack);
      res.statusCode = 500;
      return res.send(err.stack);
    }

    res.statusCode = 200;
    res.send(result.rows);

  });


  // if (typeof req.query.whose === 'undefined' || req.query.whose === '0') {
  //   // list only my repositories
  //   conn.query(
  //     'SELECT DISTINCT repositories.id, repositories.name ' + // distinct??
  //     'FROM repositories ' +
  //     'INNER JOIN runs ' +
  //     'ON repositories.id = runs.repositories_id ' +
  //     'AND runs.users_id = $1',
  //   [user.id], function(err, result) {
  //     done();

  //     if (err) {
  //       console.error('error running query', err.stack);
  //       res.statusCode = 500;
  //       return res.send(err.stack);
  //     }

  //     res.statusCode = 200;
  //     res.send(result.rows);

  //   });
  // } else if (req.query.whose === '-1') {
  //   // directly to latest run
  //   conn.query(
  //     'SELECT DISTINCT ' +
  //       'repositories.id, ' +
  //       'repositories.name, ' +
  //       'runs.run_ref ' +
  //     'FROM repositories ' +
  //     'INNER JOIN runs ' +
  //     'ON repositories.id = runs.repositories_id ' +
  //     'AND runs.id IN (' +
  //       'select id from runs where users_id = $1 order by created_at desc limit 1' +
  //     ')',
  //   [user.id], function(err, result) {
  //     done();

  //     if (err) {
  //       console.error('error running query', err.stack);
  //       res.statusCode = 500;
  //       return res.send(err.stack);
  //     }

  //     res.statusCode = 200;
  //     res.send(result.rows);

  //   })
  // } else {

  //   // per user id not implemented

  // }
}));


app.get('/repos/:repo_id/testfiles', authenticated(function(req, res, user, conn, done) {
  //////// TODO whose
  conn.query('SELECT * FROM testfiles WHERE repositories_id = $1 ORDER BY testfiles.name',
  [req.params.repo_id],
  function(err, result) {
    done();

    if (err) {
      console.error('error running query', err.stack);
      res.statusCode = 500;
      return res.send(err.stack);
    }

    res.statusCode = 200;
    res.send(result.rows);
  });
}));


app.get('/testfiles/:testfile_id/tests', authenticated(function(req, res, user, conn, done) {
  //////// TODO whose
  conn.query('SELECT * FROM tests WHERE testfiles_id = $1 ORDER BY tests.name',
  [req.params.testfile_id],
  function(err, result) {
    done();

    if (err) {
      console.error('error running query', err.stack);
      res.statusCode = 500;
      return res.send(err.stack);
    }

    res.statusCode = 200;
    res.send(result.rows);
  });
}));


app.get('/tests/:test_id/metrics', authenticated(function(req, res, user, conn, done) {
  var startDate = new Date();

  switch (req.query.span) {
    case 'hour':
      startDate.setTime(startDate.getTime() - (1000 * 60 * 60));
      break;
    case 'day':
      startDate.setTime(startDate.getTime() - (1000 * 60 * 60 * 24));
      break;
    case 'week':
      startDate.setTime(startDate.getTime() - (1000 * 60 * 60 * 24 * 7));
      break;
    case 'month':
      startDate.setTime(startDate.getTime() - (1000 * 60 * 60 * 24 * 7 * 4));
      break;
    case 'year':
      startDate.setTime(startDate.getTime() - (1000 * 60 * 60 * 24 * 7 * 4 * 12));
      break;
    default:
      startDate.setTime(startDate.getTime() - (1000 * 60 * 60));
      break;
  }

  /*
SELECT
  users.id as users_id,
  runs.id as runs_id,
  metrics.tests_id as test_id,
  metrics.name as name,
  metrics.value as value,
  metrics.created_at as ts
FROM
  users
JOIN
  runs
ON
  users.id = 1
  AND users.id = runs.users_id
JOIN
  metrics
ON
  metrics.runs_id = runs.id
  AND metrics.tests_id = 16
ORDER BY metrics.name, metrics.created_at
;
  */

  var query = [
    'SELECT',
      'metrics.name as name,',
      'metrics.value as value,',
      'metrics.tests_id as test_id,',
      'metrics.created_at as ts',
    'FROM users',
    'JOIN runs',
    'ON',
      'users.id = $1',
      'AND users.id = runs.users_id',
    'JOIN metrics',
    'ON',
      'metrics.runs_id = runs.id',
      'AND metrics.tests_id = $2',
    'WHERE metrics.created_at >= $3',
    'ORDER BY metrics.name, metrics.created_at'
  ];

  var bind = [req.query.whose, req.params.test_id, startDate.toISOString()];

  conn.query(query.join(' '), bind, function(err, result) {
    done();
    if (err) {
      console.error('error running query', err.stack);
      res.statusCode = 500;
      return res.send(err.stack);
    }

    res.statusCode = 200;
    res.send(result.rows);

  });
}));

